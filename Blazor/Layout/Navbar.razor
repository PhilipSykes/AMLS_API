@namespace Blazor.Layout
@inject ISessionStorageService SessionStorage
@inject IAuthService AuthState
@inject NavigationManager Nav

<nav class="navbar">
    <div id="desktop-nav">
        <div class="nav-left">
            <a href="/" class="home">AML</a>
        </div>
        <div class="nav-right">
            <AuthorizeView>
                <Authorized>
                    @foreach (var link in GetAuthorizedLinks(context.User))
                    {
                    @if (link.SubLinks != null)
                    {
                    <div class="dropdown">
                        <button class="button-secondary dropdown-toggle">@link.Text</button>
                        <div class="dropdown-menu">
                            @foreach (var subLink in link.SubLinks)
                            {
                            <a href="@subLink.Href">@subLink.Text</a>
                            }
                        </div>
                    </div>
                    }
                    else
                    {
                    <a class="button-secondary" href="@link.Href">@link.Text</a>
                    }
                    }
                    <a class="button-primary" @onclick="HandleLogout">Log out</a>
                </Authorized>
                <NotAuthorized>
                    <a class="button-primary" href="/login">Sign in</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</nav>

@code {
    
    private async Task HandleLogout()
    {
        await AuthState.Logout();
        StateHasChanged();
    }
    
    private IEnumerable<NavLink> GetAuthorizedLinks(ClaimsPrincipal user)
    {
        var allowedLinks = new List<NavLink>();
        
        foreach (var link in _navLinks)
        {
            if (link.Roles.Length == 0)
            {
                allowedLinks.Add(link);
                continue;
            }
            foreach (var role in link.Roles)
            {
                if (user.IsInRole(role))
                {
                    allowedLinks.Add(link);
                    break;  
                }
            }
        }
        return allowedLinks;
    }
    private record NavLink(string Text, string Href, string[] Roles, NavLink[]? SubLinks = null);
    
    private readonly NavLink[] _navLinks = new[]
    {
        new NavLink("Inventory", "/inventory", new[] { PolicyRoles.BranchManager, PolicyRoles.BranchLibrarian }),
        new NavLink("Staff Management", "/staff", new[] { PolicyRoles.BranchManager }),
        new NavLink("Branch Reports", "/reports", new[] { PolicyRoles.BranchManager }),
        new NavLink("System Metrics", "/metrics", new[] { PolicyRoles.SystemAdmin }),
        new NavLink("User Management", "", new[] { PolicyRoles.SystemAdmin }, new[]
        {
            new NavLink("Manage Staff", "/managestaff", new[] { PolicyRoles.SystemAdmin }),
            new NavLink("Manage Members", "/managemembers", new[] { PolicyRoles.SystemAdmin })
        }),
        new NavLink("My Reservations", "/reservations", new[] { PolicyRoles.Member }),
        new NavLink("My Loans", "/loans", new[] { PolicyRoles.Member }),
    };
}