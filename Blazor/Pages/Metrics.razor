@page "/Metrics"
@using System.Text.Json
@inject HttpClient HttpClient

<h3>Docker</h3>

<p>Last Updated: @_lastUpdated</p>

@if (_snapshot == null)
{
    <p>Loading metrics...</p>
}
else if (_snapshot.Count == 0)
{
    <p>No metrics available.</p>
}
else
{
    @foreach (var container in _snapshot)
    {
        var root = container.RootElement;

        <div class="container">
            <p><strong>Container ID:</strong> @root.GetProperty("containerId").GetString()</p>
            <p><strong>Container Name:</strong> @root.GetProperty("containerName").GetString()</p>
            <p><strong>CPU Usage:</strong> @Math.Round(root.GetProperty("cpuPercentage").GetDouble(), 2)%</p>
            <p><strong>Memory Usage:</strong> @Math.Round(root.GetProperty("memoryUsage").GetDouble(), 0) MB</p>
            <p><strong>Memory Limit:</strong> @Math.Round(root.GetProperty("memoryLimit").GetDouble(), 0) MB</p>
            <p><strong>Memory Percentage:</strong> @Math.Round(root.GetProperty("memoryPercentage").GetDouble(), 2)%</p>
        </div>
    }
}

@code {
    private Timer _timer;
    private DateTime _lastUpdated;
    private List<JsonDocument>? _snapshot;

    protected override async Task OnInitializedAsync()
    {
        await RefreshMetrics();

        _timer = new Timer(async _ => await RefreshMetrics(), null, 0, 5000);
    }

    private async Task RefreshMetrics()
    {
        _lastUpdated = DateTime.Now;
        _snapshot = await HttpClient.GetFromJsonAsync<List<JsonDocument>>("https://localhost:7500/api/admin/metric");
        
        StateHasChanged();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}