@page "/Metrics"
@using System.Text.Json
@inject HttpClient HttpClient
@inject IAuthService AuthState
@attribute [Authorize(Policy = Policies.CanViewMetricsReports)]

<div id="page">
    
    <h3>Docker</h3>
    
    @if (_snapshot == null)
    {
        <p>Loading metrics...</p>
    }
    else if (_snapshot.Count == 0)
    {
        <p>Cannot connect to Docker Daemon.</p>
    }
    else
    {
        if (recommendScaling)
        {
            <p class="red">Reccomend Resource Scaling</p>
        }
        <p class="last-update">Last Updated: @_lastUpdated.ToString("HH:mm:ss")</p>

        <div class="container-container">
            @foreach (var container in _snapshot)
            {
                var root = container.RootElement;

                <div class="container-card">
                    <p class="container-id">@root.GetProperty("containerId").GetString()</p>
                    <p class="container-name"><strong>@root.GetProperty("containerName").GetString()</strong></p>
                    <div class="cpu-mem">
                        <p class="cpu-percent @GetColorClass(root.GetProperty("cpuPercentage").GetDouble())"><strong>CPU: </strong> @Math.Round(root.GetProperty("cpuPercentage").GetDouble(), 2)%</p>
                        <p><strong>Memory Usage: </strong> @Math.Round(root.GetProperty("memoryUsage").GetDouble(), 0)MB/@Math.Round(root.GetProperty("memoryLimit").GetDouble() / 1000, 1)GB</p>
                        <p class="@GetColorClass(root.GetProperty("cpuPercentage").GetDouble())"><strong>Memory Percentage: </strong>@Math.Round(root.GetProperty("memoryPercentage").GetDouble(), 2)%</p>
                    </div>
                </div>
            }
        </div>
    }
</div>



@code {
    private Timer _timer;
    private DateTime _lastUpdated;
    private List<JsonDocument>? _snapshot;
    private string _jwtToken;
    private bool recommendScaling = false;
    
    private string GetColorClass(double percentage)
    {
        if (percentage >= 80) 
        {
            recommendScaling = true;
            return "red";
        }
        if (percentage >= 50) return "amber";
        return "";
    }


    protected override async Task OnInitializedAsync()
    {
        _jwtToken = await AuthState.GetBearerToken();
        await RefreshMetrics();
        _timer = new Timer(async _ => await RefreshMetrics(), null, 0, 60000);
    }

    private async Task RefreshMetrics()
    {
        _lastUpdated = DateTime.Now;
        HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _jwtToken);
        _snapshot = await HttpClient.GetFromJsonAsync<List<JsonDocument>>("https://localhost:7500/api/metric");
        
        StateHasChanged();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}