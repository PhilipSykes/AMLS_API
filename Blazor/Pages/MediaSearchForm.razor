@using Blazor.Models
<div id="sidebar">
    <EditForm Model="@_searchModel" OnValidSubmit="@OnSubmit">

        <DataAnnotationsValidator/>
        <div class="search-container">
            <input type="text" class="text-field" placeholder="Search by Title" @bind="_searchModel.MediaTitle"/>
            <div class="tag-section">
                <input type="text" class="text-field glow" placeholder="Search by @_currentPlaceholderText"
                       @bind="ActiveTagInput" @oninput="OnInputTagChange"/>

                @if (FilteredGenreList.Any())
                {
                    <div class="label-input-pair tag-group-divider">
                        <label>genre</label>
                        <div class="tag-lists">
                            @foreach (var genre in FilteredGenreList.Take(5))
                            {
                                <div class="tag-suggestion tag-hover fade-in" @onclick="() => AddTag(genre)"
                                     title="@genre">
                                    <div class="tag-wrap">@genre</div>
                                </div>
                            }
                        </div>
                    </div>
                }

                @if (_searchModel.MediaGenres.Any())
                {
                    <div class="tag-lists tag-group-divider">
                        @foreach (var selectedGenre in _searchModel.MediaGenres)
                        {
                            <div class="selected-tag tag-hover">
                                <div title="@selectedGenre" class="selected-tag-title tag-wrap">
                                    @selectedGenre
                                </div>
                                <svg class="close-btn" @onclick="() => RemoveTag(selectedGenre)" fill="#FAFAF9"
                                     xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512">
                                    <!--! Font Awesome Pro 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2024 Fonticons, Inc. -->
                                    <path
                                        d="M376.6 84.5c11.3-13.6 9.5-33.8-4.1-45.1s-33.8-9.5-45.1 4.1L192 206 56.6 43.5C45.3 29.9 25.1 28.1 11.5 39.4S-3.9 70.9 7.4 84.5L150.3 256 7.4 427.5c-11.3 13.6-9.5 33.8 4.1 45.1s33.8 9.5 45.1-4.1L192 306 327.4 468.5c11.3 13.6 31.5 15.4 45.1 4.1s15.4-31.5 4.1-45.1L233.7 256 376.6 84.5z"/>
                                </svg>
                            </div>
                        }
                    </div>
                }
            </div>
            <button type="submit" class="search-button">
                <span>Search</span></button>
        </div>
        <ValidationSummary/>
    </EditForm>
</div>


@code















{
    [Parameter] public EventCallback<List<Filter>> OnSubmitCallback { get; set; }

    private MediaSearchModel _searchModel = new();
    private List<Filter> _searchFilters = new();


    private string? ActiveTagInput { get; set; }

    private List<string> FilteredGenreList { get; set; } = new();
    private TagLists _tagLists = new();


    public async Task OnSubmit()
    {
        FormatSearchFilters(_searchModel);
        await OnSubmitCallback.InvokeAsync(_searchFilters);
    }

    private void OnInputTagChange(ChangeEventArgs e)
    {
        FilteredGenreList.Clear();

        ActiveTagInput = e.Value?.ToString() ?? string.Empty;

        if (ActiveTagInput != "")
        {
            FilteredGenreList = _tagLists.GenreList
                .Where(g => g.Contains(ActiveTagInput, StringComparison.OrdinalIgnoreCase))
                //filter selected genres
                .Where(g => !_searchModel.MediaGenres.Contains(g, StringComparer.OrdinalIgnoreCase))
                .ToList();
            StateHasChanged();
        }
    }

    private void AddTag(string genre)
    {
        if (!_searchModel.MediaGenres.Any(entry => entry.Contains(genre)))
        {
            _searchModel.MediaGenres.Add(genre);
            FilteredGenreList.Remove(genre);
            StateHasChanged();
        }
    }

    private void RemoveTag(string genre)
    {
        _searchModel.MediaGenres.Remove(genre);
        StateHasChanged();
    }

    public void FormatSearchFilters(MediaSearchModel model)
    {
        _searchFilters.Clear();

        if (!string.IsNullOrEmpty(model.MediaTitle))
        {
            var titleFilter = new Filter("title", model.MediaTitle.ToLower(), DbEnums.Contains);
            Console.WriteLine("titleFilter:" + titleFilter);
            _searchFilters.Add(titleFilter);
        }


        foreach (var genre in model.MediaGenres)
        {
            var genreFilter = new Filter("genres", genre, DbEnums.Contains);
            Console.WriteLine("genreFilter key:" + genreFilter.Key + "genre value:" + genreFilter.Value + "operation" + genreFilter.Operation);
            _searchFilters.Add(genreFilter);
        }
    }

    //Tag field Placeholder Text
    private string[] _placeholderText =
    {
        "Genre",
        "Author",
        "Director",
        "Creator",
        "Publisher",
        "Studio",
        "Network"
    };

    private string _currentPlaceholderText = "";
    private int _currentIndex = 0;
    private string _targetPlaceholderText = "";
    private bool _isDeleting = false;

    protected override void OnInitialized()
    {
        _currentPlaceholderText = _placeholderText[0];
        _targetPlaceholderText = _placeholderText[0];
        _ = StartTypingAnimation();
    }

    private async Task StartTypingAnimation()
    {
        while (true)
        {
            if (!_isDeleting && _currentPlaceholderText == _targetPlaceholderText)
            {
                await Task.Delay(3500); // Pause at full text
                _isDeleting = true;
            }

            if (_isDeleting)
            {
                if (_currentPlaceholderText.Length > 0)
                {
                    _currentPlaceholderText = _currentPlaceholderText.Substring(0, _currentPlaceholderText.Length - 1);
                    StateHasChanged();
                }
                else
                {
                    _isDeleting = false;
                    _currentIndex = (_currentIndex + 1) % _placeholderText.Length;
                    _targetPlaceholderText = _placeholderText[_currentIndex];
                    StateHasChanged();
                }
            }
            else
            {
                if (_currentPlaceholderText.Length < _targetPlaceholderText.Length)
                {
                    _currentPlaceholderText = _targetPlaceholderText.Substring(0, _currentPlaceholderText.Length + 1);
                    StateHasChanged();
                }
            }

            StateHasChanged();
            await Task.Delay(80); // Typing speed
        }
    }
}
