@using Blazor.Models


<EditForm Model="@searchModel" OnValidSubmit="@OnSubmit">
    <DataAnnotationsValidator />
    <div class="search-container">
        <div>
            <label>Media Title</label>
            <input type="text" class="text-field" @bind="searchModel.mediaTitle"/>
        </div>

        <div class="genre">
            <label>Genre</label>
            <input type="text" class="text-field" @bind="activeGenre" @oninput="OnInputGenreChange"/>
            <div class="genre-lists">
                @foreach(string genre in filteredGenreList)
                {
                    @if (filteredGenreList.IndexOf(genre) < 5)
                    {
                        <div class="genre-suggestion" @onclick="() => AddGenre(genre)">
                            <div class="genre-wrap">
                                @genre
                            </div>
                        </div>
                    }
                }
                @foreach (string selectedGenre in searchModel.MediaGenres)
                {

                    <div class="selected-genre">
                        <div class="selected-genre-title genre-wrap">@selectedGenre</div>
                        <svg class="close-btn" @onclick="() => RemoveGenre(selectedGenre)" fill="#ffffff" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><!--! Font Awesome Pro 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2024 Fonticons, Inc. --><path d="M376.6 84.5c11.3-13.6 9.5-33.8-4.1-45.1s-33.8-9.5-45.1 4.1L192 206 56.6 43.5C45.3 29.9 25.1 28.1 11.5 39.4S-3.9 70.9 7.4 84.5L150.3 256 7.4 427.5c-11.3 13.6-9.5 33.8 4.1 45.1s33.8 9.5 45.1-4.1L192 306 327.4 468.5c11.3 13.6 31.5 15.4 45.1 4.1s15.4-31.5 4.1-45.1L233.7 256 376.6 84.5z"/></svg>
                    </div>
                }
            </div>
        </div>
        <button type="submit">Search</button>
    </div>
    <ValidationSummary />
</EditForm>


@code
{
    [Parameter] public EventCallback<List<Filter>> OnSubmitCallback { get; set; }

    private MediaSearchModel searchModel = new MediaSearchModel();
    private List<Filter> search = new List<Filter>();
    
    private string activeGenre { get; set; }
    private List<string> filteredGenreList { get; set; } = new List<string>();
    private List<string> genresList = new List<string>
{
    "18th century",
    "19th century",
    "20th century",
    "abuse",
    "academic",
    "action",
    "adult",
    "adult fiction",
    "adventure",
    "africa",
    "african american",
    "african literature",
    "aliens",
    "alternate history",
    "american",
    "american civil war",
    "american history",
    "american revolution",
    "ancient",
    "ancient history",
    "angels",
    "animals",
    "anthologies",
    "anthropology",
    "apocalyptic",
    "art",
    "arthurian",
    "asia",
    "asian literature",
    "astronomy",
    "atheism",
    "audiobook",
    "australia",
    "autobiography",
    "aviation",
    "banned books",
    "bdsm",
    "biblical",
    "biblical fiction",
    "biography",
    "biography memoir",
    "biology",
    "book club",
    "books about books",
    "botswana",
    "british literature",
    "buddhism",
    "business",
    "canada",
    "cats",
    "chapter books",
    "chick lit",
    "childrens",
    "childrens classics",
    "china",
    "christian",
    "christian fiction",
    "christian romance",
    "christianity",
    "christmas",
    "church",
    "civil war",
    "classic literature",
    "classics",
    "collections",
    "college",
    "comedy",
    "comic book",
    "comic strips",
    "comics",
    "coming of age",
    "communication",
    "contemporary",
    "contemporary romance",
    "cooking",
    "counting",
    "crime",
    "cyberpunk",
    "czech literature",
    "dark",
    "death",
    "demons",
    "detective",
    "dinosaurs",
    "disability",
    "dogs",
    "dragons",
    "drama",
    "dystopia",
    "eastern philosophy",
    "economics",
    "education",
    "egypt",
    "english literature",
    "environment",
    "epic",
    "epic fantasy",
    "erotic romance",
    "erotica",
    "espionage",
    "essays",
    "ethiopia",
    "european history",
    "evolution",
    "fae",
    "fairies",
    "fairy tales",
    "faith",
    "family",
    "fantasy",
    "feminism",
    "fiction",
    "fighters",
    "finance",
    "folklore",
    "food",
    "france",
    "french literature",
    "french revolution",
    "futuristic",
    "gender",
    "german literature",
    "germany",
    "ghosts",
    "gothic",
    "graphic novels",
    "graphic novels comics",
    "greece",
    "greek mythology",
    "halloween",
    "health",
    "high fantasy",
    "high school",
    "historical",
    "historical fiction",
    "historical romance",
    "history",
    "holiday",
    "holocaust",
    "horror",
    "horse racing",
    "horses",
    "humor",
    "india",
    "indian literature",
    "inspirational",
    "ireland",
    "irish literature",
    "islam",
    "israel",
    "italian literature",
    "italy",
    "japan",
    "japanese literature",
    "jewish",
    "journalism",
    "judaism",
    "juvenile",
    "kids",
    "latin american",
    "law",
    "lds",
    "leadership",
    "legal thriller",
    "lgbt",
    "literary fiction",
    "literature",
    "love",
    "love story",
    "magic",
    "magical realism",
    "management",
    "mathematics",
    "media tie in",
    "medical",
    "medicine",
    "medieval",
    "memoir",
    "mental health",
    "mental illness",
    "middle grade",
    "military fiction",
    "modern classics",
    "monsters",
    "mountaineering",
    "music",
    "mystery",
    "mystery thriller",
    "mythology",
    "native americans",
    "nature",
    "new adult",
    "new age",
    "new york",
    "nigeria",
    "nobel prize",
    "noir",
    "nonfiction",
    "novels",
    "nutrition",
    "pakistan",
    "paranormal",
    "paranormal romance",
    "personal development",
    "philosophy",
    "physics",
    "picture books",
    "pirates",
    "plays",
    "poetry",
    "political science",
    "politics",
    "popular science",
    "portugal",
    "portuguese literature",
    "post apocalyptic",
    "prehistoric",
    "presidents",
    "productivity",
    "psychological thriller",
    "psychology",
    "queer",
    "race",
    "read for school",
    "realistic fiction",
    "reference",
    "regency",
    "relationships",
    "religion",
    "retellings",
    "road trip",
    "robots",
    "romance",
    "romanticism",
    "russia",
    "russian literature",
    "scandinavian literature",
    "school",
    "science",
    "science fiction",
    "science fiction fantasy",
    "scotland",
    "self help",
    "short stories",
    "social justice",
    "social science",
    "sociology",
    "south africa",
    "southern",
    "southern gothic",
    "space",
    "space opera",
    "spain",
    "spanish literature",
    "speculative fiction",
    "spirituality",
    "sports",
    "steampunk",
    "storytime",
    "superheroes",
    "supernatural",
    "survival",
    "suspense",
    "sweden",
    "swedish literature",
    "taoism",
    "teen",
    "the united states of america",
    "theatre",
    "theology",
    "theory",
    "thriller",
    "time travel",
    "tragedy",
    "travel",
    "travelogue",
    "true crime",
    "true story",
    "tudor period",
    "unfinished",
    "unicorns",
    "urban fantasy",
    "vampires",
    "victorian",
    "war",
    "werewolves",
    "westerns",
    "witches",
    "womens",
    "world war i",
    "world war ii",
    "writing",
    "young adult",
    "young adult contemporary",
    "young adult fantasy",
    "young adult romance",
    "zombies"
    };


    public async Task OnSubmit()
    {
        FormatSearchFilters(searchModel);
        await OnSubmitCallback.InvokeAsync(search);
    }

    private void OnInputGenreChange(ChangeEventArgs e)
    {
        activeGenre = e.Value?.ToString() ?? string.Empty;
        if (activeGenre != "")
        {
            filteredGenreList = genresList
                .Where(g => g.Contains(activeGenre, StringComparison.OrdinalIgnoreCase))
                //filter selected genres
                .Where(g => !searchModel.MediaGenres.Contains(g, StringComparer.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            filteredGenreList.Clear();
        }
    }

    private async Task AddGenre(string genre)
    {
        if (!searchModel.MediaGenres.Any(entry => entry.Contains(genre)))
        {
            searchModel.MediaGenres.Add(genre);
            filteredGenreList.Remove(genre);
            StateHasChanged();
        }
    }

    private async Task RemoveGenre(string genre)
    {
        searchModel.MediaGenres.Remove(genre);
        StateHasChanged();
    }
    
    public void FormatSearchFilters(MediaSearchModel model)
    {
        search.Clear();
        
        Console.WriteLine("I am formatting filters");
        if (!string.IsNullOrEmpty(model.mediaTitle))
        {
            Filter titleFilter = new Filter("title",model.mediaTitle,'~');
            Console.WriteLine("titleFilter:"+titleFilter);
            search.Add(titleFilter);
        }
        

        foreach (var genre in model.MediaGenres)
        {
            Filter genreFilter = new Filter("genres", genre, '~');
            Console.WriteLine("genreFilter key:"+genreFilter.Key+"genre value:"+genreFilter.Value+"operation"+genreFilter.Operation);
            search.Add(genreFilter);
        }
    }
}
