@using Blazor.Models

<div id="sidebar">
    <EditForm Model="@_searchModel" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator/>
        <div class="search-container">
            <input type="text" class="text-field" placeholder="Search by Title" @bind="_searchModel.MediaTitle"/>
            <div class="tag-section">
                <input type="text" class="text-field glow" placeholder="Search by @_currentPlaceholderText"
                       @bind="ActiveTagInput" @oninput="OnInputTagChange"/>

                @* Genre Tags *@
                @if (FilteredGenreList.Any())
                {
                    <div class="label-input-pair tag-group-divider">
                        <label>genre</label>
                        <div class="tag-lists">
                            @foreach (var genre in FilteredGenreList.Take(5))
                            {
                                <div class="tag-suggestion tag-hover fade-in"
                                     @onclick="() => AddTag(genre, TagType.Genre)"
                                     title="@genre">
                                    <div class="tag-wrap">@genre</div>
                                </div>
                            }
                        </div>
                    </div>
                }

                @* Author Tags *@
                @if (FilteredAuthorList.Any())
                {
                    <div class="label-input-pair tag-group-divider">
                        <label>author</label>
                        <div class="tag-lists">
                            @foreach (var author in FilteredAuthorList.Take(5))
                            {
                                <div class="tag-suggestion tag-hover fade-in"
                                     @onclick="() => AddTag(author, TagType.Author)"
                                     title="@author">
                                    <div class="tag-wrap">@author</div>
                                </div>
                            }
                        </div>
                    </div>
                }

                @* Studio Tags *@
                @if (FilteredStudioList.Any())
                {
                    <div class="label-input-pair tag-group-divider">
                        <label>studio</label>
                        <div class="tag-lists">
                            @foreach (var studio in FilteredStudioList.Take(5))
                            {
                                <div class="tag-suggestion tag-hover fade-in"
                                     @onclick="() => AddTag(studio, TagType.Studio)"
                                     title="@studio">
                                    <div class="tag-wrap">@studio</div>
                                </div>
                            }
                        </div>
                    </div>
                }

                @* Director Tags *@
                @if (FilteredDirectorList.Any())
                {
                    <div class="label-input-pair tag-group-divider">
                        <label>director</label>
                        <div class="tag-lists">
                            @foreach (var director in FilteredDirectorList.Take(5))
                            {
                                <div class="tag-suggestion tag-hover fade-in"
                                     @onclick="() => AddTag(director, TagType.Director)"
                                     title="@director">
                                    <div class="tag-wrap">@director</div>
                                </div>
                            }
                        </div>
                    </div>
                }

                @* Selected Tags Display *@
                @if (_searchModel.MediaGenres.Any() || _searchModel.MediaAuthors.Any() ||
                     _searchModel.MediaDirectors.Any() || _searchModel.MediaStudios.Any())
                {
                    <div class="tag-lists tag-group-divider">
                        @foreach (var selectedGenre in _searchModel.MediaGenres)
                        {
                            <div class="selected-tag tag-hover">
                                <div title="@selectedGenre" class="selected-tag-title tag-wrap">
                                    @selectedGenre
                                </div>
                                <svg class="close-btn" @onclick="() => RemoveTag(selectedGenre, TagType.Genre)"
                                     fill="#FAFAF9"
                                     xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512">
                                    <path
                                        d="M376.6 84.5c11.3-13.6 9.5-33.8-4.1-45.1s-33.8-9.5-45.1 4.1L192 206 56.6 43.5C45.3 29.9 25.1 28.1 11.5 39.4S-3.9 70.9 7.4 84.5L150.3 256 7.4 427.5c-11.3 13.6-9.5 33.8 4.1 45.1s33.8 9.5 45.1-4.1L192 306 327.4 468.5c11.3 13.6 31.5 15.4 45.1 4.1s15.4-31.5 4.1-45.1L233.7 256 376.6 84.5z"/>
                                </svg>
                            </div>
                        }
                        @foreach (var selectedAuthor in _searchModel.MediaAuthors)
                        {
                            <div class="selected-tag tag-hover">
                                <div title="@selectedAuthor" class="selected-tag-title tag-wrap">
                                    @selectedAuthor
                                </div>
                                <svg class="close-btn" @onclick="() => RemoveTag(selectedAuthor, TagType.Author)"
                                     fill="#FAFAF9"
                                     xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512">
                                    <path
                                        d="M376.6 84.5c11.3-13.6 9.5-33.8-4.1-45.1s-33.8-9.5-45.1 4.1L192 206 56.6 43.5C45.3 29.9 25.1 28.1 11.5 39.4S-3.9 70.9 7.4 84.5L150.3 256 7.4 427.5c-11.3 13.6-9.5 33.8 4.1 45.1s33.8 9.5 45.1-4.1L192 306 327.4 468.5c11.3 13.6 31.5 15.4 45.1 4.1s15.4-31.5 4.1-45.1L233.7 256 376.6 84.5z"/>
                                </svg>
                            </div>
                        }
                        @foreach (var selectedDirector in _searchModel.MediaDirectors)
                        {
                            <div class="selected-tag tag-hover">
                                <div title="@selectedDirector" class="selected-tag-title tag-wrap">
                                    @selectedDirector
                                </div>
                                <svg class="close-btn" @onclick="() => RemoveTag(selectedDirector, TagType.Director)"
                                     fill="#FAFAF9"
                                     xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512">
                                    <path
                                        d="M376.6 84.5c11.3-13.6 9.5-33.8-4.1-45.1s-33.8-9.5-45.1 4.1L192 206 56.6 43.5C45.3 29.9 25.1 28.1 11.5 39.4S-3.9 70.9 7.4 84.5L150.3 256 7.4 427.5c-11.3 13.6-9.5 33.8 4.1 45.1s33.8 9.5 45.1-4.1L192 306 327.4 468.5c11.3 13.6 31.5 15.4 45.1 4.1s15.4-31.5 4.1-45.1L233.7 256 376.6 84.5z"/>
                                </svg>
                            </div>
                        }
                        @foreach (var selectedStudio in _searchModel.MediaStudios)
                        {
                            <div class="selected-tag tag-hover">
                                <div title="@selectedStudio" class="selected-tag-title tag-wrap">
                                    @selectedStudio
                                </div>
                                <svg class="close-btn" @onclick="() => RemoveTag(selectedStudio, TagType.Studio)"
                                     fill="#FAFAF9"
                                     xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512">
                                    <path
                                        d="M376.6 84.5c11.3-13.6 9.5-33.8-4.1-45.1s-33.8-9.5-45.1 4.1L192 206 56.6 43.5C45.3 29.9 25.1 28.1 11.5 39.4S-3.9 70.9 7.4 84.5L150.3 256 7.4 427.5c-11.3 13.6-9.5 33.8 4.1 45.1s33.8 9.5 45.1-4.1L192 306 327.4 468.5c11.3 13.6 31.5 15.4 45.1 4.1s15.4-31.5 4.1-45.1L233.7 256 376.6 84.5z"/>
                                </svg>
                            </div>
                        }
                    </div>
                }
            </div>
            <button type="submit" class="search-button">
                <span>Search</span>
            </button>
        </div>
        <ValidationSummary/>
    </EditForm>
</div>

@code {
    [Parameter] public EventCallback<List<Filter>> OnSubmitCallback { get; set; }

    private MediaSearchModel _searchModel = new();
    private List<Filter> _searchFilters = new();
    private string? ActiveTagInput { get; set; }

    private List<string> FilteredGenreList { get; set; } = new();
    private List<string> FilteredAuthorList { get; set; } = new();
    private List<string> FilteredStudioList { get; set; } = new();
    private List<string> FilteredDirectorList { get; set; } = new();

    private TagLists _tagLists = new();

    private enum TagType
    {
        Genre,
        Author,
        Studio,
        Director,
        Creator,
        Company
    }

    public async Task OnSubmit()
    {
        FormatSearchFilters(_searchModel);
        await OnSubmitCallback.InvokeAsync(_searchFilters);
    }

    private void OnInputTagChange(ChangeEventArgs e)
    {
        ClearFilteredLists();

        ActiveTagInput = e.Value?.ToString() ?? string.Empty;

        if (!string.IsNullOrEmpty(ActiveTagInput))
        {
            FilteredGenreList = _tagLists.GenreList
                .Where(g => g.Contains(ActiveTagInput, StringComparison.OrdinalIgnoreCase))
                .Where(g => !_searchModel.MediaGenres.Contains(g, StringComparer.OrdinalIgnoreCase))
                .ToList();

            FilteredAuthorList = _tagLists.AuthorList
                .Where(a => a.Contains(ActiveTagInput, StringComparison.OrdinalIgnoreCase))
                .Where(a => !_searchModel.MediaAuthors.Contains(a, StringComparer.OrdinalIgnoreCase))
                .ToList();

            FilteredStudioList = _tagLists.StudioList
                .Where(s => s.Contains(ActiveTagInput, StringComparison.OrdinalIgnoreCase))
                .Where(s => !_searchModel.MediaStudios.Contains(s, StringComparer.OrdinalIgnoreCase))
                .ToList();

            FilteredDirectorList = _tagLists.DirectorList
                .Where(d => d.Contains(ActiveTagInput, StringComparison.OrdinalIgnoreCase))
                .Where(d => !_searchModel.MediaDirectors.Contains(d, StringComparer.OrdinalIgnoreCase))
                .ToList();

            StateHasChanged();
        }
    }

    private void ClearFilteredLists()
    {
        FilteredGenreList.Clear();
        FilteredAuthorList.Clear();
        FilteredStudioList.Clear();
        FilteredDirectorList.Clear();
    }

    private void AddTag(string tag, TagType type)
    {
        switch (type)
        {
            case TagType.Genre:
                if (!_searchModel.MediaGenres.Contains(tag))
                {
                    _searchModel.MediaGenres.Add(tag);
                    FilteredGenreList.Remove(tag);
                }

                break;
            case TagType.Author:
                if (!_searchModel.MediaAuthors.Contains(tag))
                {
                    _searchModel.MediaAuthors.Add(tag);
                    FilteredAuthorList.Remove(tag);
                }

                break;
            case TagType.Director:
                if (!_searchModel.MediaDirectors.Contains(tag))
                {
                    _searchModel.MediaDirectors.Add(tag);
                    FilteredDirectorList.Remove(tag);
                }

                break;
            case TagType.Studio:
                if (!_searchModel.MediaStudios.Contains(tag))
                {
                    _searchModel.MediaStudios.Add(tag);
                    FilteredStudioList.Remove(tag);
                }

                break;
        }

        StateHasChanged();
    }

    private void RemoveTag(string tag, TagType type)
    {
        switch (type)
        {
            case TagType.Genre:
                _searchModel.MediaGenres.Remove(tag);
                break;
            case TagType.Author:
                _searchModel.MediaAuthors.Remove(tag);
                break;
            case TagType.Director:
                _searchModel.MediaDirectors.Remove(tag);
                break;
            case TagType.Studio:
                _searchModel.MediaStudios.Remove(tag);
                break;
        }

        StateHasChanged();
    }

    public void FormatSearchFilters(MediaSearchModel model)
    {
        _searchFilters.Clear();

        if (!string.IsNullOrEmpty(model.MediaTitle))
        {
            var titleFilter = new Filter("title", model.MediaTitle.ToLower(), DbEnums.Contains);
            _searchFilters.Add(titleFilter);
        }

        foreach (var genre in model.MediaGenres)
        {
            var genreFilter = new Filter("genres", genre, DbEnums.Contains);
            _searchFilters.Add(genreFilter);
        }

        foreach (var author in model.MediaAuthors)
        {
            var authorFilter = new Filter("author", author, DbEnums.Contains);
            _searchFilters.Add(authorFilter);
        }

        foreach (var director in model.MediaDirectors)
        {
            var directorFilter = new Filter("director", director, DbEnums.Contains);
            _searchFilters.Add(directorFilter);
        }

        foreach (var studio in model.MediaStudios)
        {
            var studioFilter = new Filter("studio", studio, DbEnums.Contains);
            _searchFilters.Add(studioFilter);
        }
    }

    // Placeholder Text Animation Code
    private string[] _placeholderText =
    {
        "Genre",
        "Author",
        "Director",
        "Studio"
    };

    private string _currentPlaceholderText = "";
    private int _currentIndex = 0;
    private string _targetPlaceholderText = "";
    private bool _isDeleting = false;

    protected override void OnInitialized()
    {
        _currentPlaceholderText = _placeholderText[0];
        _targetPlaceholderText = _placeholderText[0];
        _ = StartTypingAnimation();
    }

    private async Task StartTypingAnimation()
    {
        while (true)
        {
            if (!_isDeleting && _currentPlaceholderText == _targetPlaceholderText)
            {
                await Task.Delay(3500);
                _isDeleting = true;
            }

            if (_isDeleting)
            {
                if (_currentPlaceholderText.Length > 0)
                {
                    _currentPlaceholderText = _currentPlaceholderText.Substring(0, _currentPlaceholderText.Length - 1);
                    StateHasChanged();
                }
                else
                {
                    _isDeleting = false;
                    _currentIndex = (_currentIndex + 1) % _placeholderText.Length;
                    _targetPlaceholderText = _placeholderText[_currentIndex];
                    StateHasChanged();
                }
            }
            else
            {
                if (_currentPlaceholderText.Length < _targetPlaceholderText.Length)
                {
                    _currentPlaceholderText = _targetPlaceholderText.Substring(0, _currentPlaceholderText.Length + 1);
                    StateHasChanged();
                }
            }

            StateHasChanged();
            await Task.Delay(80);
        }
    }

}