@using Blazor.Models

<EditForm Model="@searchModel" OnValidSubmit="@onSubmit">
    <div class="search-container">
        <div>
            <label>Media Title</label>
            <InputText @bind-Value="searchModel.mediaTitle"/>
        </div>
        
        <div class="genre">
            <label>Genre</label>
            <InputText class="text-field" @bind-Value="activeGenre" @oninput="OnInputGenreChange"/>
            <div class="genre-lists">
                @foreach (string genre in filteredGenreList)
                {
                    <div class="genre-suggestion" @onclick="() => AddGenre(genre)">@genre</div>
                }
                @foreach (string selectedGenre in searchModel.mediaGenres)
                {
                    
                    <div class="selected-genre">
                        <div class="selected-genre-title">@selectedGenre</div>
                        <svg class="close-btn" @onclick="() => RemoveGenre(selectedGenre)" fill="#ffffff" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><!--! Font Awesome Pro 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2024 Fonticons, Inc. --><path d="M376.6 84.5c11.3-13.6 9.5-33.8-4.1-45.1s-33.8-9.5-45.1 4.1L192 206 56.6 43.5C45.3 29.9 25.1 28.1 11.5 39.4S-3.9 70.9 7.4 84.5L150.3 256 7.4 427.5c-11.3 13.6-9.5 33.8 4.1 45.1s33.8 9.5 45.1-4.1L192 306 327.4 468.5c11.3 13.6 31.5 15.4 45.1 4.1s15.4-31.5 4.1-45.1L233.7 256 376.6 84.5z"/></svg>
                    </div>
                }
            </div>
        </div>
    </div>
</EditForm>


@code
{
    private MediaSearchModel searchModel = new MediaSearchModel();
    
    private string activeGenre { get; set; }
    private List<string> genresList = new List<string> { "Action" , "Horror" , "Thriller", "Comedy"};
    private List<string> filteredGenreList { get; set; } = new List<string>();

    private void onSubmit()
    {
        
    }

    private void OnInputGenreChange(ChangeEventArgs e)
    {
        activeGenre = e.Value?.ToString() ?? string.Empty;
        if (activeGenre != "")
        {
            filteredGenreList = genresList
                .Where(g => g.Contains(activeGenre, StringComparison.OrdinalIgnoreCase))
                //filter selected genres
                .Where(g => !searchModel.mediaGenres.Contains(g, StringComparer.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            filteredGenreList.Clear();
        }
    }

    private async Task AddGenre(string genre)
    {
        if (!searchModel.mediaGenres.Any(entry => entry.Contains(genre)))
        {
            searchModel.mediaGenres.Add(genre);
            filteredGenreList.Remove(genre);
            StateHasChanged();
        }
    }

    private async Task RemoveGenre(string genre)
    {
        searchModel.mediaGenres.Remove(genre);
        StateHasChanged();
    }
}
