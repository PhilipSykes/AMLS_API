@inject NavigationManager Nav

<tr class="@(IsExpanded ? "expanded" : null)">
    <td>@Media.ObjectId</td>
    <td class="title">@Media.MediaInfo.Title</td>
    <td><span class="pill">@Media.MediaInfo.Type</span></td>
    <td> 
        @if (IsAvailable)
        {
            <span class="pill available">Available</span>
        }
        else
        {
            <span class="pill unavailable">Unavailable</span>
        } 
    </td> 
    <td><span class="pill">@GetBranchName()</span> </td> 
    <td>
        <div class="action-buttons">
            <button class="action-btn @(IsExpanded ? "active" : null)" @onclick="ToggleDetails">
                <svg class="action-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                </svg>
            </button>
            <AuthorizeView Policy="EditBranchMedia">
                <Authorized Context="auth">
                    <button class="action-btn edit @(HasBranchAccess(auth.User, Media.BranchDetails?.ObjectId) ? "" : "disabled")"@onclick="() => HandleEditClick(auth.User)">
                        <svg class="action-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                        </svg>
                    </button>
                </Authorized>
                <NotAuthorized>
                    <button class="action-btn edit disabled" @onclick="ShowUnauthorizedModal">
                        <svg class="action-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                        </svg>
                    </button>
                </NotAuthorized>
            </AuthorizeView>
        </div>
        @if (showModal)
        {
            <div class="modal-backdrop" @onclick="CloseModal">
                
                <div class="modal-content" @onclick:stopPropagation="true">
                    <h3>Access Denied</h3>
                    <p>@_unauthorizedMessage</p> 
                    <button class="button-primary" @onclick="CloseModal">Close</button> 
                    </div>
            </div>
        }
    </td> 
</tr>
@if (IsExpanded)
{ 
    <tr class="details-row"> 
        <td colspan="6"> 
            <div class="details-content"> 
                <div class="details-section"> 
                    <h3>Details</h3>
                    @switch (Media.MediaInfo.Type?.ToLower())
                    {
                        case "book":
                            <p><strong>ISBN:</strong> @Media.MediaInfo.Isbn</p>
                            <p><strong>Author:</strong> @Media.MediaInfo.Author</p>
                            <p><strong>Publisher:</strong> @Media.MediaInfo.Publisher</p>
                            break;
                        case "film":
                            <p><strong>Director:</strong> @Media.MediaInfo.Director</p>
                            <p><strong>Studio:</strong> @Media.MediaInfo.Studio</p>
                            break;
                        case "tv series":
                            <p><strong>Creator:</strong> @Media.MediaInfo.Creator</p>
                            <p><strong>Network:</strong> @Media.MediaInfo.Network</p>
                            <p><strong>Season:</strong> @Media.MediaInfo.Season</p>
                            <p><strong>Episodes:</strong> @Media.MediaInfo.Episodes</p>
                            break;
                    }
                    <p><strong>Release Date:</strong> @Media.MediaInfo.ReleaseDate.ToShortDateString()</p>
                </div>
                <div class="details-section">
                    <h3>Status</h3> 
                    @{ var currentReservation = Media.Reservations?.OrderBy(r => r.StartDate).FirstOrDefault(); } 
                    <p><strong>Loan Status:</strong> @Media.Status</p>
                    <p><strong>Reservation Status:</strong> 
                        @if (currentReservation != null) { <span>Reserved</span> } else { <span>Available for Reservation</span> } </p> 
                    @if (currentReservation != null) { 
                        <p><strong>Next Reservation:</strong> @currentReservation.StartDate.ToShortDateString()</p>
                        <p><strong>Reservation End:</strong> @currentReservation.EndDate.ToShortDateString()</p>
                        
                    } <p><strong>Total Reservations:</strong> @(Media.Reservations?.Count ?? 0)</p> 
                </div> 
            </div> 
        </td> 
    </tr>
} 

@code {
    [Parameter] public Entities.PhysicalInventory Media { get; set; } = new();
    private bool IsAvailable { get; set; }
    private bool IsExpanded { get; set; }
    private bool showModal; 
    private string _unauthorizedMessage = "";
    
    private void ToggleDetails()
    {
        IsExpanded = !IsExpanded;
    }
    
    private async Task OnEdit(Entities.PhysicalInventory item)
    {
        Nav.NavigateTo($"/editMedia/{Media.Branch}/{Media.MediaInfo.ObjectId}/{Media.ObjectId}");
    }

    protected override void OnInitialized()
    {
        IsAvailable = Media.Status == "Available";
    }

    private string GetBranchName()
    {
        return Media.BranchDetails?.Name ?? "No Branch";
    } 
    
    private void HandleEditClick(ClaimsPrincipal user)
    {
        if (HasBranchAccess(user, Media.BranchDetails?.ObjectId))
        {
            OnEdit(Media); 
            
        }
        else
        {
            _unauthorizedMessage = $"You do not have access to edit media items at {Media.BranchDetails?.Name ?? "this branch"}."; showModal = true;
        }
    }

    private void ShowUnauthorizedModal()
    {
        _unauthorizedMessage = "You do not have the required role to edit media items."; 
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false; _unauthorizedMessage = "";
        Console.WriteLine();
    }

    private bool HasBranchAccess(ClaimsPrincipal user, string? branchId)
    {
        if (string.IsNullOrEmpty(branchId))
        {
            return false;
        } 
        var branchClaims = user.FindAll(PolicyClaims.BranchAccess).Select(c => c.Value); 
        return branchClaims.Contains(branchId);
    }
    
}