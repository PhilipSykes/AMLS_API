@page "/media/book/{MediaId}"
@using System.Net
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthService AuthService
@attribute [Authorize]


<link rel="stylesheet" href="/css/media.css">
<div class="media-info-container">
    <div class="media-container">
        <div class="media-title-rating">
            <h2 class="media-title">@_result.Title</h2>
            <div class="rating">
                @for (var i = 1; i <= 5; i++)
                {
                    <RatingStar colorValue="@(i <= Math.Round(_result.Rating))"></RatingStar>
                }
            </div>
        </div>
        
        <div class="info-description">
            <div class="description">
                <h3 class="section-title">Description</h3>
                <p>@_result.Description</p>
            </div>
            
            <div class="info">
                <h3 class="section-title">Info</h3>
                <div class="info-fields">
                    <div class="info-field">
                        <div class="info-title">Author</div>
                        <div class="info-content">
                            @(_result.Author.Contains(',') ? _result.Author.Split(',')[0] : _result.Author)
                        </div>
                    </div>
                    <div class="info-field">
                        <div class="info-title">Publisher</div>
                        <div class="info-content">
                            @_result.Publisher
                        </div>
                    </div>
                    <div class="info-field">
                        <div class="info-title">Publish Date</div>
                        <div class="info-content">
                            @_result.ReleaseDate.ToLocalTime().ToString("dd/MM/yyyy")
                        </div>
                    </div>
                    <div class="info-field">
                        <div class="info-title">ISBN</div>
                        <div class="info-content">
                            @_result.Isbn
                        </div>
                    </div>
                </div>
            </div>
            <div class="info">
                <AuthorizeView Policy="CanReserveMedia">
                    <Authorized Context="auth">
                        @if (_reservables !=  null && _reservables.Any())
                        {
                            <p>@_reservationResultMessage</p>
                            @foreach (var item in _reservables)
                            {
                                <p>@item.BranchName</p>
                                @if (item.Timeslots.Any())
                                {
                                    <p>Reservable within ranges:</p>
                                    <ul>
                                        @foreach (var timeslot in item.Timeslots)
                                        {
                                            <li>@timeslot.Start - @timeslot.End</li>
                                            <button @onclick="() => CreateReservation(item.Item, timeslot.Start)">
                                                Reserve
                                            </button>
                                        }
                                    </ul>
                                    
                                }
                                <p>After: @item.LastEnd</p>
                                <button @onclick="() => CreateReservation(item.Item, item.LastEnd)">
                                    Reserve
                                </button>
                            }
                        }
                    </Authorized>
                    <NotAuthorized>
                        <p class="borrow"><a href="/login">Sign in</a> to borrow media</p>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
            <div>
                
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter] public string MediaId { get; set; }

    private List<Entities.MediaInfo> _mediaResults = new();
    private Entities.MediaInfo _result = new();
    private readonly List<Filter> _filters = new();
    AuthenticationState authState;
    private string? userEmail;
    private string? userRole;
    private IEnumerable<string>? branches;
    private List<Entities.ReservableItem>? _reservables;
    private string _reservationResultMessage = "";
    private string? _jwtToken;

    protected override async Task OnInitializedAsync()
    {
        _jwtToken = await AuthService.GetBearerToken();
        _filters.Add(new Filter("_id", MediaId, DbEnums.Equals));
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        var response = await HttpClient.PostAsJsonAsync($"api/catalog/search?page={1}&count={1}", _filters);
        if (response.IsSuccessStatusCode)
        {
            var searchResponse = await response.Content.ReadFromJsonAsync<Response<List<Entities.MediaInfo>>>();
            if (searchResponse != null)
            {
                _mediaResults = searchResponse.Data;
                _result = _mediaResults[0];
                _reservables = await GetReservableItems(user); // note await might be causing problems when page loads strangely
                Console.WriteLine(_result);
            }
        }

        StateHasChanged();
    }

    static string GetColor(int i, Entities.MediaInfo result)
    {
        if (i <= result.Rating)
        {
            return "#44403C";
        }
        return "#D6D3D1";
    }
   
    
    // Gets list of ReservableItem, each has timeslots where reservations can be made
    private async Task<List<Entities.ReservableItem>> GetReservableItems(ClaimsPrincipal user)
    {

        var request = new GetReservablesRequest
        {
            Media = _result.ObjectId,
            Branches = user.FindAll(PolicyClaims.BranchAccess).Select(c => c.Value).ToArray(),
            MinimumDays = 7
        };
        HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _jwtToken);
        var reservablesResponse = await HttpClient.PostAsJsonAsync("api/reservations/getReservable", request);
        var reservables = await reservablesResponse.Content.ReadFromJsonAsync<Response<List<Entities.ReservableItem>>>();
        if (reservables is null)
        {
            return new List<Entities.ReservableItem>();
        }
        return reservables.Data ?? new List<Entities.ReservableItem>();
        
    }

    private async Task CreateReservation(string item, DateTime start)
    {
        start = start.AddDays(1);
        Entities.Reservation reservation = new Entities.Reservation
        {
            ObjectId = ObjectId.GenerateNewId().ToString(),
            Item = item,
            Member = "67236480b4d08aab049740aa", // HARDCODED CHANGE LATER
            StartDate = start,
            EndDate = start.AddDays(7)
        };
        var reservationResponse = await HttpClient.PostAsJsonAsync("api/reservations/create", reservation);
        if (reservationResponse.StatusCode == HttpStatusCode.Created)
        {
            _reservationResultMessage = "Reservation successfully created";
        }
        else
        {
            _reservationResultMessage = "Reservation could not be created, please refresh and try again";
        }
        StateHasChanged();
    }

    private async Task Borrow(string item)
    {
        string member = "67236480b4d08aab049740aa"; // HARDCODED CHANGE LATER
        var reservationResponse = await HttpClient.PostAsJsonAsync("api/loans/check-out", (item, member));
        if (reservationResponse.IsSuccessStatusCode)
        {
            _reservationResultMessage = "Borrowed Item";
        }
        else
        {
            _reservationResultMessage = "Not able to borrow";
        }
    }

    // Done by librarian really
    private async Task ReturnItem(string item)
    {
        var result = await HttpClient.PostAsJsonAsync("api/loans/check-in", item);
    }

}