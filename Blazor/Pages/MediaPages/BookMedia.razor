@page "/media/book/{MediaId}"
@inject HttpClient HttpClient
@inject NavigationManager Nav
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@using System.Security.Claims
@attribute [Authorize]
@inject AuthenticationStateProvider AuthStateProvider




<link rel="stylesheet" href="/css/media.css">
<div class="media-info-container">
    <div class="media-container">
        <div class="media-title-rating">
            <h2 class="media-title">@_result.Title</h2>
            <div class="rating">
                @for (var i = 1; i <= 5; i++)
                {
                    <RatingStar colorValue="@(i <= Math.Round(_result.Rating))"></RatingStar>
                }
            </div>
        </div>
        
        <div class="info-description">
            <div class="description">
                <h3 class="section-title">Description</h3>
                <p>@_result.Description</p>
            </div>
            
            <div class="info">
                <h3 class="section-title">Info</h3>
                <div class="info-fields">
                    <div class="info-field">
                        <div class="info-title">Author</div>
                        <div class="info-content">
                            @(_result.Author.Contains(',') ? _result.Author.Split(',')[0] : _result.Author)
                        </div>
                    </div>
                    <div class="info-field">
                        <div class="info-title">Publisher</div>
                        <div class="info-content">
                            @_result.Publisher
                        </div>
                    </div>
                    <div class="info-field">
                        <div class="info-title">Publish Date</div>
                        <div class="info-content">
                            @_result.ReleaseDate.ToLocalTime().ToString("dd/MM/yyyy")
                        </div>
                    </div>
                    <div class="info-field">
                        <div class="info-title">ISBN</div>
                        <div class="info-content">
                            @_result.Isbn
                        </div>
                    </div>
                </div>
            </div>
            <div>
                
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter] public string MediaId { get; set; }

    private List<Entities.MediaInfo> _mediaResults = new();
    private Entities.MediaInfo _result = new();
    private readonly List<Filter> _filters = new();
    AuthenticationState state;
    private string? userEmail;
    private string? userRole;
    private IEnumerable<string>? branches;

    protected override async Task OnInitializedAsync()
    {
        _filters.Add(new Filter("_id", MediaId, DbEnums.Equals));

        var response = await HttpClient.PostAsJsonAsync($"api/catalog/search?page={1}&count={1}", _filters);
        if (response.IsSuccessStatusCode)
        {
            var searchResponse = await response.Content.ReadFromJsonAsync<Response<List<Entities.MediaInfo>>>();
            if (searchResponse != null)
            {
                _mediaResults = searchResponse.Data;
                _result = _mediaResults[0];
                Console.WriteLine(_result);
            }
        }
        
        state = await AuthStateProvider.GetAuthenticationStateAsync();
        userEmail = state.User.FindFirst(ClaimTypes.Email)?.Value;
        userRole = state.User.FindFirst(ClaimTypes.Role)?.Value;
        branches = state.User.FindAll("BranchAccess").Select(c => c.Value);

        StateHasChanged();
    }

    static string GetColor(int i, Entities.MediaInfo result)
    {
        if (i <= result.Rating)
        {
            return "#44403C";
        }
        return "#D6D3D1";
    }
   
    private async Task<HttpResponseMessage> GetReservableItems(string media, string[] branches, int minumumLength)
    {
        var request = new GetReservablesRequest
        {
            Media = media,
            Branches = branches,
            MinimumDays = minumumLength
        };
        var reservablesResponse = await HttpClient.PostAsJsonAsync("api/reservations/getReservable", request);
        return reservablesResponse;
    }
    
    
}