@inject HttpClient HttpClient
@inject NavigationManager Nav

<tr>
    <td>@user.ObjectId</td>
    <td>@user.FirstName</td>
    <td>@user.LastName</td>
    <td>@user.DateOfBirth</td>
    <td>@GetBranchName()</td>
    <td>
        <div class="action-buttons">
            <button class="action-btn" @onclick="ViewHistory">
                <svg class="action-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
            </button>
            <button class="action-btn" @onclick="DeleteUser">
                <svg class="action-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                </svg>
            </button>
        </div>
    </td>
</tr>
@if (_showDeleteConfirmation)
{
<div class="modal-overlay">
    <div class="modal-content">
        <h3>Confirm Deletion</h3>
        <p>Are you sure you want to delete this user's account? This action cannot be undone.</p>
        <div class="modal-actions">
            <button class="modal-button secondary-button" @onclick="CancelDelete">Cancel</button>
            <button class="modal-button danger-button" @onclick="DeleteUser">Delete</button>
        </div>
    </div>
</div>
}

@code {
    [Parameter] public Entities.Members user { get; set; } = new();
    [Parameter] public List<Entities.Branch> branchList { get; set; } = new();
    private bool _showDeleteConfirmation = false;
    
    private string GetBranchName()
    {
        if (string.IsNullOrEmpty(user.NearestBranch))
            return "No Branch Assigned";

        var branch = branchList.FirstOrDefault(b => b.ObjectId == user.NearestBranch);
        return branch?.Name ?? "Unknown Branch";
    }
    
    private async Task ViewHistory()
    {
       
    }

    private void ShowDeleteConfirmation() => _showDeleteConfirmation = true;
    private void CancelDelete() => _showDeleteConfirmation = false;

    private async Task DeleteUser()
    {
        var response = await HttpClient.DeleteAsync($"api/usermanagement/members/delete");
        if (response.IsSuccessStatusCode)
        {
            Nav.NavigateTo("/managemember");
        }
    }
}