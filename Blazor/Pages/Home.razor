@page "/"
@inject HttpClient HttpClient

<PageTitle>Home</PageTitle>

<div id="responsive-layout">
    <MediaSearchForm OnSubmitCallback="MakeSearch"/>
    <div id="search-results">
        @foreach (var media in mediaResults)
        {
            <SearchResultListComponent Media="@media"></SearchResultListComponent>
        }
    </div>
</div>


@code {
    //TODO: do something to stop the glow fade-out on page load

    private List<Entities.MediaInfo> mediaResults = new();
    private bool test = false;
    readonly (int, int) _pagination = (1, 20); // temp for testing

    protected override async Task OnInitializedAsync()
    {
        await GetMedia();
    }

    private async Task GetMedia()
    {
        var response = await HttpClient.GetFromJsonAsync<Response<List<Entities.MediaInfo>>>($"/api/catalog/?page={_pagination.Item1}&count={_pagination.Item2}");
        if (response?.Success == true && response.Data != null)
        {
            mediaResults = response.Data;
        }
    }

    private async Task GetSearchResults(List<Filter> filters)
    {
        var response = await HttpClient.PostAsJsonAsync($"/api/catalog/search?page={_pagination.Item1}&count={_pagination.Item2}", filters);
        if (response.IsSuccessStatusCode)
        {
            var searchResponse = await response.Content.ReadFromJsonAsync<Response<List<Entities.MediaInfo>>>();
            if (searchResponse != null)
            {
                mediaResults = searchResponse.Data;
            }
        }

        StateHasChanged();
    }

    private async Task MakeSearch(List<Filter> filters)
    {
        mediaResults.Clear();
        await GetSearchResults(filters);
    }

}