@page "/"
@using MongoDB.Bson.IO
@inject HttpClient HttpClient

<PageTitle>Home</PageTitle>

<div id="responsive-layout">
    <MediaSearchForm OnSubmitCallback="MakeSearch" />
    <div id="search-results">
        @foreach (var doc in bsonDocs)
        {
            <SearchResultListComponent resultString="@doc" IsAvailable="@available"></SearchResultListComponent>
        }
    </div>
</div>


@code {

    bool available = true;
    //TODO: do something to stop the glow fade-out on page load
    
    private List<string> bsonDocs = new();
    private bool test = false;
    (int, int) _pagination = (1, 20); // temp for testing

    protected override async Task OnInitializedAsync()
    {
        await GetMedia();
    }

    private async Task GetMedia()
    {
        var response = await HttpClient.GetFromJsonAsync<SearchResponse>($"api/media/?page={_pagination.Item1}&count={_pagination.Item2}");
        if (response != null && response.Results != null)
        {
            bsonDocs = response.Results;
        }
    }

    private async Task GetSearchResults(List<Filter> filters)
    {
        var response = await HttpClient.PostAsJsonAsync($"api/media/search?page={_pagination.Item1}&count={_pagination.Item2}", filters);
        if (response.IsSuccessStatusCode)
        {
            var searchResponse = await response.Content.ReadFromJsonAsync<SearchResponse>();
            if (searchResponse != null)
            {
                bsonDocs = searchResponse.Results;
            }
        }
        StateHasChanged();
    }
    private async Task MakeSearch(List<Filter> filters)
    {
        bsonDocs.Clear();
        await GetSearchResults(filters);
    }
}