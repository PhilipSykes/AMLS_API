@page "/"
@inject HttpClient HttpClient

<PageTitle>Home</PageTitle>

<div id="responsive-layout">
    <MediaSearchForm OnSubmitCallback="MakeSearch"/>
    <div id="search-results">
        @foreach (var media in _mediaResults)
        {
            <SearchResultListComponent Media="@media"></SearchResultListComponent>
        }
        <Pagination
            CurrentPage="@_currentPage"
            TotalItems="@_totalItems"
            ItemsPerPage="@_pageSize"
            OnPageSelected="@HandlePageChange" />
    </div>
</div>


@code {
    //TODO: do something to stop the glow fade-out on page load

    private List<Entities.MediaInfo> _mediaResults = new();
    private bool test = false;
    private int _currentPage = 1; 
    private int _pageSize = 20; 
    private long _totalItems;
    private List<Filter>? _currentFilters;

    protected override async Task OnInitializedAsync()
    {
        await GetMedia();
    }
    
    private async Task HandlePageChange(int page)
    {
        _currentPage = page;
        if (_currentFilters != null && _currentFilters.Any())
        {
            await GetSearchResults(_currentFilters);
        }
        else
        {
            await GetMedia();
        }
    }

    private async Task GetMedia()
    {
        var response = await HttpClient.GetFromJsonAsync<PaginatedResponse<List<Entities.MediaInfo>>>($"/api/catalog/?page={_currentPage}&count={_pageSize}");
        if (response?.Success == true && response.Data != null)
        {
            _mediaResults = response.Data;
            _totalItems = response.MatchCount;
        }
    }

    private async Task GetSearchResults(List<Filter> filters)
    {
        var response = await HttpClient.PostAsJsonAsync($"/api/catalog/search?page={_currentPage}&count={_pageSize}", filters);
        if (response.IsSuccessStatusCode)
        {
            var searchResponse = await response.Content.ReadFromJsonAsync<PaginatedResponse<List<Entities.MediaInfo>>>();
            if (searchResponse != null)
            {
                _mediaResults = searchResponse.Data;
                _totalItems = searchResponse.MatchCount;
            }
        }

        StateHasChanged();
    }

    private async Task MakeSearch(List<Filter> filters)
    {
        _currentPage = 1; 
        _currentFilters = filters;
        _mediaResults.Clear();
        await GetSearchResults(filters);
    }

}