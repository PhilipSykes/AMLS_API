@page "/media/{MediaId}"
@inject HttpClient HttpClient
@inject NavigationManager Nav


<div class="media-info-container">
    <div class="media-container">
        <div class="media-title-rating">
            <h2 class="media-title">@_result.Title</h2>
            <div class="rating">
                @for (var i = 1; i <= 5; i++)
                {
                    <RatingStar colorValue="@(i <= Math.Round(_result.Rating))"></RatingStar>
                }
            </div>
        </div>
        
        <div class="info-description">
            <div class="description">
                <h3 class="section-title">Desctription</h3>
                <p>@_result.Description</p>
            </div>
            
            <div class="info">
                <h3 class="section-title">Info</h3>
                <div class="info-fields">
                    <div class="info-field">
                        <div class="info-title">Author</div>
                        <div class="info-content">
                            @(_result.Author.Contains(',') ? _result.Author.Split(',')[0] : _result.Author)
                        </div>
                    </div>
                    <div class="info-field">
                        <div class="info-title">Publisher</div>
                        <div class="info-content">
                            @_result.Publisher
                        </div>
                    </div>
                    <div class="info-field">
                        <div class="info-title">Publish Date</div>
                        <div class="info-content">
                            @_result.ReleaseDate.ToLocalTime().ToString("dd/MM/yyyy")
                        </div>
                    </div>
                    <div class="info-field">
                        <div class="info-title">ISBN</div>
                        <div class="info-content">
                            @_result.Isbn
                        </div>
                    </div>
                </div>
            </div>
            
            @foreach (var copy in _result.PhysicalCopies)
            {
                
            }
        </div>
    </div>
</div>


@code {
    [Parameter] public string MediaId { get; set; }

    private List<Entities.MediaInfo> _mediaResults = new();
    private Entities.MediaInfo _result = new();
    private readonly List<Filter> _filters = new();


    protected override async Task OnInitializedAsync()
    {
        _filters.Add(new Filter("_id", MediaId, DbEnums.Equals));

        var response = await HttpClient.PostAsJsonAsync($"api/catalog/search?page={1}&count={1}", _filters);
        if (response.IsSuccessStatusCode)
        {
            var searchResponse = await response.Content.ReadFromJsonAsync<Response<List<Entities.MediaInfo>>>();
            if (searchResponse != null)
            {
                _mediaResults = searchResponse.Data;
                _result = _mediaResults[0];
                Console.WriteLine(_result);
            }
        }

        StateHasChanged();
    }

    static string GetColor(int i, Entities.MediaInfo result)
    {
        if (i <= result.Rating)
        {
            return "#44403C";
        }
        return "#D6D3D1";
    }
    public async Task<HttpResponseMessage> TestCreateReservation()
    {
        Entities.Reservation reservation = new Entities.Reservation
        {
            Id = ObjectId.GenerateNewId().ToString(),
            StartDate = DateTime.UtcNow,
            EndDate = DateTime.UtcNow.AddDays(1),
            Item = "673f6d28e580ac7f9f4fa9b3",
            Member = "67236480b4d08aab049740aa"

        };
        var response = await HttpClient.PostAsJsonAsync("api/reservations/create", reservation);
        Console.WriteLine(await response.Content.ReadAsStringAsync());
        
        return response;
    } 
    public async Task<HttpResponseMessage> TestCancelReservation()
    {
        string reservationId = "67586896360a7f5735c67352";
        var response = await HttpClient.PostAsJsonAsync("api/reservations/cancel", reservationId);
        Console.WriteLine(await response.Content.ReadAsStringAsync());
        
        return response;
    }

    public async Task<HttpResponseMessage> TestExtendReservation()
    {
        var request = new PayLoads.ReservationExtension
        {
            ReservationId = "67586896360a7f5735c67352",
            NewEndDate = DateTime.Now.AddDays(7)
        };
        var response = await HttpClient.PostAsJsonAsync("api/reservations/extend", request);
        Console.WriteLine(await response.Content.ReadAsStringAsync());
        
        return response;
    }
}