@using Blazor.Models

<div id="sidebar">
    <EditForm Model="@_searchModel" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        <div class="search-container">
                <input type="text" class="text-field" placeholder="Enter ID" @bind="_searchModel.Id"/>
                <input type="text" class="text-field" placeholder="Enter title" @bind="_searchModel.MediaTitle"/>
                <select class="text-field" @bind="_searchModel.MediaType">
                    <option value="">Media Type</option>
                    <option value="Book">Book</option>
                    <option value="Film">Film</option>
                    <option value="TV Series">TV Series</option>
                </select>
                <select class="text-field" @bind="_searchModel.Branch">
                    <option value="">All Branches</option>
                    @foreach (var branch in BranchList)
                    {
                        <option value="@branch.ObjectID">@branch.Name</option>
                    }
                </select>
                <button type="submit" class="search-button">
                    <span>Search</span></button>
                </div>
        <ValidationSummary />
    </EditForm>
</div>

@code { 
    [Parameter] 
    public EventCallback<List<Filter>> OnSubmitCallback { get; set; } 
    
    private InventorySearchModel _searchModel = new InventorySearchModel(); 
    private List<Filter> _searchFilters = new List<Filter>(); 
    
    [Parameter]
    public List<Entities.Branch> BranchList { get; set; } = new();
    
    public async Task OnSubmit() { 
        FormatSearchFilters(_searchModel); 
        await OnSubmitCallback.InvokeAsync(_searchFilters); 
    } 
    private void FormatSearchFilters(InventorySearchModel model) 
    {
        _searchFilters.Clear();
        if (!string.IsNullOrEmpty(model.Id))
        {
            _searchFilters.Add(new Filter("_id", model.Id, DbOperations.Equals));
        }

        if (!string.IsNullOrEmpty(model.MediaTitle))
        {
            _searchFilters.Add(new Filter("title", model.MediaTitle, DbOperations.Contains));
        }
        
        if (!string.IsNullOrEmpty(model.MediaType))
        {
            _searchFilters.Add(new Filter("type", model.MediaType, FilterTypes.Equals));
        }

        if (!string.IsNullOrEmpty(model.Branch))
        {
            _searchFilters.Add(new Filter("branch", model.Branch, DbOperations.Equals));
        } 
    }

}