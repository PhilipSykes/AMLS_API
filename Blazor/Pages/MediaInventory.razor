@page "/Inventory"
@inject HttpClient HttpClient
@inject AuthStateService AuthState

<PageTitle>Inventory</PageTitle>

<div id="responsive-layout">
        <InventorySearchForm OnSubmitCallback="MakeSearch"/>
        <div class="results-container">
            <table class="results-table">
                <thead>
                <tr>
                    <th>ID</th> 
                    <th>Title</th> 
                    <th>Type</th> 
                    <th>Status</th> 
                    <th>Language</th> 
                    <th>Branch</th> 
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var media in _inventoryResults)
                {
                    <InventoryResultListComponent Media="@media" OnViewDetailsCallback="HandleViewDetails" OnEditCallback="HandleEdit"/>
                }
                </tbody>
            </table>
        </div>
    </div>



@code { 
    private List<Entities.MediaInfo> _inventoryResults = new();
    private (int, int) _pagination = (1, 20); 
    private string? _jwtToken;

    protected override async Task OnInitializedAsync()
    {
        _jwtToken = await AuthState.GetBearerToken(); await GetInventory(_jwtToken);
    }

    private async Task GetInventory(string? jwtToken)
    {
        HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", jwtToken); 
        var response = await HttpClient.GetFromJsonAsync<Response<List<Entities.MediaInfo>>>($"api/inventory/?page={_pagination.Item1}&count={_pagination.Item2}");
        if (response?.Success == true && response.Data != null)
        {
            _inventoryResults = response.Data;
        }
    }

    private async Task GetSearchResults(List<Filter> filters)
    {
        HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _jwtToken); 
        var response = await HttpClient.PostAsJsonAsync($"api/inventory/search?page={_pagination.Item1}&count={_pagination.Item2}", filters);
        if (response.IsSuccessStatusCode)
        {
            var searchResponse = await response.Content.ReadFromJsonAsync<Response<List<Entities.MediaInfo>>>();
            if (searchResponse != null)
            {
                _inventoryResults = searchResponse.Data;
            }
        } 
        StateHasChanged();
    }

    private async Task MakeSearch(List<Filter> filters)
    {
        _inventoryResults.Clear(); await GetSearchResults(filters);
    } private async Task HandleViewDetails(Entities.MediaInfo item) { 
        // Implement view details logic 
    } 
    private async Task HandleEdit(Entities.MediaInfo item) { 
        // Implement edit logic 
    } 

}