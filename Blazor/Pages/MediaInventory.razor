@page "/Inventory"
@* @attribute [Authorize(Policy = )] *@
@inject HttpClient HttpClient
@inject IAuthService AuthState


<PageTitle>Inventory</PageTitle>

<div id="responsive-layout">
        <InventorySearchForm BranchList="@inventoryData.BranchesList" OnSubmitCallback="MakeSearch"/>
        <div class="results-container">
            <table class="results-table">
                <thead>
                <tr>
                    <th>ID</th> 
                    <th>Title</th> 
                    <th>Type</th> 
                    <th>Status</th> 
                    <th>Branch</th> 
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in inventoryData.PhysicalMediaList)
                {
                    <InventoryResultListComponent Media="@item"/>
                }
                </tbody>
            </table>
        </div>
    </div>



@code { 
    private PayLoads.Inventory inventoryData = new() 
    { 
        PhysicalMediaList = new(), 
        BranchesList = new() 
    };
    private (int, int) _pagination = (1, 20); 
    private string? _jwtToken;
    private ClaimsPrincipal? currentUser;

    protected override async Task OnInitializedAsync()
    {
        _jwtToken = await AuthState.GetBearerToken(); 
        
        await GetInventory();
    }

    private async Task GetInventory()
    {
        HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _jwtToken); 
        var response = await HttpClient.GetFromJsonAsync<Response<PayLoads.Inventory>>($"api/inventory/?page={_pagination.Item1}&count={_pagination.Item2}");
        
        if (response?.Success == true && response.Data != null)
        {
            Console.WriteLine($"PhysicalMediaList Entry: {response.Data.PhysicalMediaList[0]}");
            inventoryData = response.Data;
        }
    }

    private async Task GetSearchResults(List<Filter> filters)
    {
        HttpClient.DefaultRequestHeaders.Authorization = 
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _jwtToken); 
        var response = await HttpClient.PostAsJsonAsync(
            $"api/inventory/search?page={_pagination.Item1}&count={_pagination.Item2}", 
            filters);
        Console.WriteLine($"Search Response Status: {response.StatusCode}");
        if (response.IsSuccessStatusCode)
        {
            var searchResponse = await response.Content.ReadFromJsonAsync<PaginatedResponse<List<Entities.PhysicalInventory>>>();
            Console.WriteLine($"Search Results Count: {searchResponse?.Data?.Count ?? 0}");
            if (searchResponse?.Success == true && searchResponse.Data != null)
            {
                inventoryData.PhysicalMediaList = searchResponse.Data;
                Console.WriteLine($"Updated PhysicalMediaList Count: {inventoryData.PhysicalMediaList.Count}");
            }
        } 
        StateHasChanged();
    }

    private async Task MakeSearch(List<Filter> filters)
    {
        inventoryData.PhysicalMediaList.Clear();
        await GetSearchResults(filters);
    } 

}