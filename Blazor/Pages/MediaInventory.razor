@page "/Inventory"
@inject HttpClient HttpClient
@inject IAuthService AuthState
@attribute [Authorize(Policy = Policies.CanViewInventory)]

<PageTitle>Inventory</PageTitle>

<div id="responsive-layout">
        <InventorySearchForm BranchList="@_inventoryData.BranchesList" OnSubmitCallback="MakeSearch"/>
        <div class="results-container">
            <table class="results-table">
                <thead>
                <tr>
                    <th>ID</th> 
                    <th>Title</th> 
                    <th>Type</th> 
                    <th>Status</th> 
                    <th>Branch</th> 
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in _inventoryData.PhysicalMediaList)
                {
                    <InventoryResultListComponent Media="@item"/>
                }
                </tbody>
            </table>
            <Pagination
                CurrentPage="@_currentPage"
                TotalItems="@_totalItems"
                ItemsPerPage="@_pageSize"
                OnPageSelected="@HandlePageChange" />
        </div>
    </div>



@code { 
    private PayLoads.Inventory _inventoryData = new() 
    { 
        PhysicalMediaList = new(), 
        BranchesList = new() 
    };
    private int _currentPage = 1; 
    private int _pageSize = 20; 
    private long _totalItems;
    private List<Filter>? _currentFilters;
    private string? _jwtToken;

    protected override async Task OnInitializedAsync()
    {
        _jwtToken = await AuthState.GetBearerToken(); 
        
        await GetInventory();
    }
    
    private async Task HandlePageChange(int page)
    {
        _currentPage = page;
        if (_currentFilters != null && _currentFilters.Any())
        {
            await GetSearchResults(_currentFilters);
        }
        else
        {
            await GetInventory();
        }
    }

    private async Task GetInventory()
    {
        HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _jwtToken); 
        var response = await HttpClient.GetFromJsonAsync<PaginatedResponse<PayLoads.Inventory>>($"api/inventory/?page={_currentPage}&count={_pageSize}");
        
        if (response?.Success == true && response.Data != null)
        {
            _inventoryData = response.Data;
            _totalItems = response.MatchCount;
        }
    }

    private async Task GetSearchResults(List<Filter> filters)
    {
        HttpClient.DefaultRequestHeaders.Authorization = 
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _jwtToken); 
        var response = await HttpClient.PostAsJsonAsync($"api/inventory/search?page={_currentPage}&count={_pageSize}", filters);
        
        if (response.IsSuccessStatusCode)
        {
            var searchResponse = await response.Content.ReadFromJsonAsync<PaginatedResponse<List<Entities.PhysicalInventory>>>();
            if (searchResponse?.Success == true && searchResponse.Data != null)
            {
                _inventoryData.PhysicalMediaList = searchResponse.Data;
                _totalItems = searchResponse.MatchCount;
            }
        } 
        StateHasChanged();
    }

    private async Task MakeSearch(List<Filter> filters)
    {
        _currentPage = 1; 
        _currentFilters = filters;
        _inventoryData.PhysicalMediaList.Clear();
        await GetSearchResults(filters);
    } 

}