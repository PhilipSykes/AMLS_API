@page "/editMedia/{Branch}/{MediaInfoId}/{ItemId}"
@using Blazor.Models
@inject HttpClient HttpClient
@inject NavigationManager Nav
@inject IAuthService AuthState
@attribute [Authorize(Policy = Policies.CanEditMedia)]
@attribute [Authorize(Policy = Policies.CanDeleteMedia)]

<div class="edit-container">
    <h2>Edit Media Details</h2>
    <EditForm Model="@_editModel" OnValidSubmit="@HandleSubmit" class="edit-form">
        <DataAnnotationsValidator />

        <div class="form-grid">
            <div class="form-section">
                <h3>Basic Information</h3>
                <div class="input-group">
                    <label for="title">Title</label>
                    <input type="text" id="title" @bind="_editModel.Title" class="text-field" />
                </div>

                <div class="input-group">
                    <label for="type">Type</label>
                    <select id="type" @bind="_editModel.Type" @bind:after="OnTypeChanged" class="text-field">
                        <option value="Book">Book</option>
                        <option value="Film">Film</option>
                        <option value="TV Series">TV Series</option>
                    </select>
                </div>

                <div class="input-group">
                    <label for="language">Language</label>
                    <input type="text" id="language" @bind="_editModel.Language" class="text-field" />
                </div>
            </div>

            <div class="form-section">
                <h3>@GetDetailsHeader()</h3>
                @switch (_editModel.Type?.ToLower())
                {
                    case "book":
                        <div class="input-group">
                            <label for="author">Author</label>
                            <input type="text" id="author" @bind="_editModel.Author" class="text-field" />
                        </div>
                        <div class="input-group">
                            <label for="publisher">Publisher</label>
                            <input type="text" id="publisher" @bind="_editModel.Publisher" class="text-field" />
                        </div>
                        <div class="input-group">
                            <label for="isbn">ISBN</label>
                            <input type="text" id="isbn" @bind="_editModel.Isbn" class="text-field" />
                        </div>
                        break;
                        
                    case "film":
                        <div class="input-group">
                            <label for="director">Director</label>
                            <input type="text" id="director" @bind="_editModel.Director" class="text-field" />
                        </div>
                        <div class="input-group">
                            <label for="studio">Studio</label>
                            <input type="text" id="studio" @bind="_editModel.Studio" class="text-field" />
                        </div>
                        break;
                        
                    case "tv series":
                        <div class="input-group">
                            <label for="creator">Creator</label>
                            <input type="text" id="creator" @bind="_editModel.Creator" class="text-field" />
                        </div>
                        <div class="input-group">
                            <label for="network">Network</label>
                            <input type="text" id="network" @bind="_editModel.Network" class="text-field" />
                        </div>
                        <div class="input-group">
                            <label for="season">Season</label>
                            <input type="number" id="season" @bind="_editModel.Season" class="text-field" />
                        </div>
                        <div class="input-group">
                            <label for="episodes">Episodes</label>
                            <input type="number" id="episodes" @bind="_editModel.Episodes" class="text-field" />
                        </div>
                        break;
                }

                <div class="input-group">
                    <label for="publishDate">Release Date</label>
                    <input type="date" id="publishDate" @bind="_editModel.PublishDate" class="text-field" />
                </div>
            </div>

            <div class="form-section full-width">
                <h3>Additional Details</h3>
                <div class="input-group">
                    <label for="description">Description</label>
                    <textarea id="description" @bind="_editModel.Description" class="text-field" rows="4"></textarea>
                </div>

                <div class="input-group">
                    <label for="genres">Genres (comma-separated)</label>
                    <input type="text" id="genres" @bind="_genresInput" class="text-field" />
                </div>
            </div>
        </div>

        <div class="form-actions">
            <button type="button" class="action-button danger-button" @onclick="ShowDeleteConfirmation">Delete Media</button>
            <div class="action-spacer"></div>
            <button type="submit" class="action-button primary-button">Save Changes</button>
            <button type="button" class="action-button secondary-button" @onclick="CancelEdit">Cancel</button>
        </div>
    </EditForm>
    @if (_showDeleteConfirmation)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <h3>Confirm Deletion</h3>
                <p>Are you sure you want to delete "@_media.Title"? This action cannot be undone.</p>
                <div class="modal-actions">
                    <button class="action-button secondary-button" @onclick="CancelDelete">Cancel</button>
                    <button class="action-button danger-button" @onclick="DeleteMedia">Delete</button>
                </div>
            </div>
        </div>
    }
</div>
<StatusModal @ref="_statusModal" />
@code {
    [Parameter] public string MediaInfoId { get; set; }
    [Parameter] public string ItemId { get; set; }
    [Parameter] public string Branch { get; set; }
    private Entities.MediaInfo _media;
    private MediaInfoEditModel _editModel = new();
    private readonly List<Filter> _filters = new();
    private string _genresInput = string.Empty;
    private bool _showDeleteConfirmation = false;
    private string? _jwtToken;
    private StatusModal? _statusModal;

    private string GetDetailsHeader()
    {
        switch (_editModel.Type?.ToLower())
        {
            case "book":
                return "Publishing Details";
            case "film":
                return "Production Details";
            case "tv series":
                return "Series Details";
            default:
                return "Details";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        int page = 1,count = 1;
        _jwtToken = await AuthState.GetBearerToken();
        _filters.Add(new Filter(DbFieldNames.Id, MediaInfoId, DbEnums.Equals));

        HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _jwtToken);
        var response = await HttpClient.PostAsJsonAsync($"api/catalog/search?page={page}&count={count}", _filters);
        if (response.IsSuccessStatusCode)
        {
            var searchResponse = await response.Content.ReadFromJsonAsync<Response<List<Entities.MediaInfo>>>();
            if (searchResponse != null)
            {
                _media = searchResponse.Data[0];
                InitializeEditModel();
            }
        }
    }

    private void InitializeEditModel()
    {
        _editModel = new MediaInfoEditModel
        {
            Title = _media.Title,
            Language = _media.Language,
            Description = _media.Description,
            Isbn = _media.Isbn,
            PublishDate = _media.ReleaseDate,
            Type = _media.Type,
            
            // Type-specific fields
            Author = _media.Author,
            Publisher = _media.Publisher,
            Director = _media.Director,
            Studio = _media.Studio,
            Creator = _media.Creator,
            Network = _media.Network,
            Season = _media.Season,
            Episodes = _media.Episodes
        };
        _genresInput = string.Join(",", _media.Genres);
    }

    private async Task HandleSubmit()
    {
        var updateModel = new Entities.MediaInfo
        {
            ObjectId = MediaInfoId,
            Title = _editModel.Title,
            Language = _editModel.Language,
            Description = _editModel.Description,
            Isbn = _editModel.Isbn,
            ReleaseDate = _editModel.PublishDate,
            Type = _editModel.Type,
        
            // Type-specific fields based on media type
            Author = _editModel.Type == "Book" ? _editModel.Author : string.Empty,
            Publisher = _editModel.Type == "Book" ? _editModel.Publisher : string.Empty,
            Director = _editModel.Type == "Film" ? _editModel.Director : string.Empty,
            Studio = _editModel.Type == "Film" ? _editModel.Studio : string.Empty,
            Creator = _editModel.Type == "TV Series" ? _editModel.Creator : string.Empty,
            Network = _editModel.Type == "TV Series" ? _editModel.Network : string.Empty,
            Season = _editModel.Type == "TV Series" ? _editModel.Season : 0,
            Episodes = _editModel.Type == "TV Series" ? _editModel.Episodes : 0,
        
            Genres = _genresInput.Split(',', StringSplitOptions.RemoveEmptyEntries).Select(g => g.Trim()).ToArray()
        };

        HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _jwtToken);
        var response = await HttpClient.PutAsJsonAsync($"api/inventory/{Branch}/edit", updateModel);
        var result = await response.Content.ReadFromJsonAsync<Response<string>>();
        Console.WriteLine($"Update Response: {result?.Message}, Success: {result?.Success}");
        if (result != null && _statusModal != null)
        {
            await _statusModal.ShowStatusModal(result, result.Success ? "/inventory" : null);
        }
    }

    private void OnTypeChanged()
    {
        // Reset type-specific fields when type changes
        _editModel.Author = string.Empty;
        _editModel.Publisher = string.Empty;
        _editModel.Director = string.Empty;
        _editModel.Studio = string.Empty;
        _editModel.Creator = string.Empty;
        _editModel.Network = string.Empty;
        _editModel.Season = 0;
        _editModel.Episodes = 0;
    }

    private void CancelEdit() => Nav.NavigateTo("/inventory");
    private void ShowDeleteConfirmation() => _showDeleteConfirmation = true;
    private void CancelDelete() => _showDeleteConfirmation = false;

    private async Task DeleteMedia()
    {
        var response = await HttpClient.DeleteAsync($"api/inventory/{Branch}/delete/{ItemId}");
        var result = await response.Content.ReadFromJsonAsync<Response<string>>();
        Console.WriteLine($"Delete Response: {result?.Message}, Success: {result?.Success}"); 
        if (result != null && _statusModal != null)
        {
            await _statusModal.ShowStatusModal(result, result.Success ? "/inventory" : null);
        }
    }
}